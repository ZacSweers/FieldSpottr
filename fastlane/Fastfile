skip_docs

platform :android do

  lane :publish_prod do
    upload_to_play_store(
      package_name: "dev.zacsweers.fieldspottr",
      track: "alpha",
      aab: "build/outputs/bundle/release/app-release.aab",
      mapping: "build/outputs/mapping/release/mapping.txt",
      json_key: "release/play-account.json"
    )
  end

end

platform :ios do
  projects = ["FieldSpottr"]

  before_all do |lane|
    cleanup_ci_keychain if is_ci
    xcodes(select_for_current_build_only: true)
  end

  after_all do |lane|
    cleanup_ci_keychain if is_ci
  end

  error do |lane, exception|
    cleanup_ci_keychain if is_ci
  end

  lane :certs do |options|
    app_store_connect_api_key
    match(app_identifier: ios_bundle_ids)
  end

  lane :recreate_certs do |options|
    app_store_connect_api_key

    match_nuke(
      app_identifier: ios_bundle_ids,
      type: "appstore"
    )

    match(app_identifier: ios_bundle_ids)
  end

  lane :lint do
    for project in projects
      swiftlint(
        mode: :lint,
        path: project,
        strict: true,
        raise_if_swiftlint_error: true,
        config_file: ".swiftlint.yml"
      )

      swiftformat(
        path: project,
        swiftversion: "5.0",
        config: ".swiftformat",
        lint: true
      )
    end
  end

  lane :lint_fix do
    for project in projects
      swiftlint(
        mode: :fix,
        path: project,
        strict: true,
        raise_if_swiftlint_error: true,
        config_file: ".swiftlint.yml"
      )

      swiftformat(
        path: project,
        swiftversion: "5.0",
        config: ".swiftformat",
      )
    end
  end

  private_lane :build_fs do |options|
    setup_ci if is_ci

    skip_certs = env_nil_or_blank('MATCH_PASSWORD')

    certs(type: 'appstore') unless skip_certs

    increment_build_number(
      xcodeproj: "FieldSpottr/FieldSpottr.xcodeproj",
      build_number: ENV['FS_BUILD_NUMBER']
    ) unless env_nil_or_blank('FS_BUILD_NUMBER')

    build_app(
      project: "FieldSpottr/FieldSpottr.xcodeproj",
      scheme: options[:scheme],
      buildlog_path: "build/fastlane-buildlog",
      skip_package_ipa: skip_certs,
      skip_codesigning: skip_certs
    )
  end

  lane :build_prod do
    build_fs(scheme: "FieldSpottr")
  end

  lane :publish_prod do
    app_store_connect_api_key
    upload_to_testflight(app_identifier: "dev.zacsweers.fieldspottr")
  end

  lane :build do
    build_prod
  end
end

def cleanup_ci_keychain(name = "fastlane_tmp_keychain")
  if File.exist? File.expand_path("~/Library/Keychains/#{name}-db")
    puts "CI keychain exists. Deleting it and restoring the default keychain"
    delete_keychain(name: name)
    sh("security default-keychain -s ~/Library/Keychains/login.keychain-db")
  end
end

def env_nil_or_blank(name)
  value = ENV[name]
  return value.nil? || value.empty?
end
